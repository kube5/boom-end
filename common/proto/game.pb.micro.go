// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/game.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Game service

func NewGameEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Game service

type GameService interface {
	GameRandom(ctx context.Context, in *GameRandomReq, opts ...client.CallOption) (*GameRandomResp, error)
	GameGetInviteCode(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*GameGetInviteCodeResp, error)
	LeaderBoard(ctx context.Context, in *LeaderBoardReq, opts ...client.CallOption) (*LeaderBoardResp, error)
	MissionCheckIn(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*Empty, error)
	MissionTweet(ctx context.Context, in *MissionTweetReq, opts ...client.CallOption) (*Empty, error)
	MissionInvited(ctx context.Context, in *MissionInvitedReq, opts ...client.CallOption) (*Empty, error)
	MissionProfile(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*MissionProfileResp, error)
	ScoreList(ctx context.Context, in *ScoreListReq, opts ...client.CallOption) (*ScoreListResp, error)
	ConsumeList(ctx context.Context, in *ConsumeListReq, opts ...client.CallOption) (*ConsumeListResp, error)
	TGGameRandom(ctx context.Context, in *GameRandomReq, opts ...client.CallOption) (*GameRandomResp, error)
	TGLeaderBoard(ctx context.Context, in *LeaderBoardReq, opts ...client.CallOption) (*LeaderBoardResp, error)
	Game24H(ctx context.Context, in *Game24HReq, opts ...client.CallOption) (*Game24HResp, error)
}

type gameService struct {
	c    client.Client
	name string
}

func NewGameService(name string, c client.Client) GameService {
	return &gameService{
		c:    c,
		name: name,
	}
}

func (c *gameService) GameRandom(ctx context.Context, in *GameRandomReq, opts ...client.CallOption) (*GameRandomResp, error) {
	req := c.c.NewRequest(c.name, "Game.GameRandom", in)
	out := new(GameRandomResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GameGetInviteCode(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*GameGetInviteCodeResp, error) {
	req := c.c.NewRequest(c.name, "Game.GameGetInviteCode", in)
	out := new(GameGetInviteCodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) LeaderBoard(ctx context.Context, in *LeaderBoardReq, opts ...client.CallOption) (*LeaderBoardResp, error) {
	req := c.c.NewRequest(c.name, "Game.LeaderBoard", in)
	out := new(LeaderBoardResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) MissionCheckIn(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Game.MissionCheckIn", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) MissionTweet(ctx context.Context, in *MissionTweetReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Game.MissionTweet", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) MissionInvited(ctx context.Context, in *MissionInvitedReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Game.MissionInvited", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) MissionProfile(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*MissionProfileResp, error) {
	req := c.c.NewRequest(c.name, "Game.MissionProfile", in)
	out := new(MissionProfileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) ScoreList(ctx context.Context, in *ScoreListReq, opts ...client.CallOption) (*ScoreListResp, error) {
	req := c.c.NewRequest(c.name, "Game.ScoreList", in)
	out := new(ScoreListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) ConsumeList(ctx context.Context, in *ConsumeListReq, opts ...client.CallOption) (*ConsumeListResp, error) {
	req := c.c.NewRequest(c.name, "Game.ConsumeList", in)
	out := new(ConsumeListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) TGGameRandom(ctx context.Context, in *GameRandomReq, opts ...client.CallOption) (*GameRandomResp, error) {
	req := c.c.NewRequest(c.name, "Game.TGGameRandom", in)
	out := new(GameRandomResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) TGLeaderBoard(ctx context.Context, in *LeaderBoardReq, opts ...client.CallOption) (*LeaderBoardResp, error) {
	req := c.c.NewRequest(c.name, "Game.TGLeaderBoard", in)
	out := new(LeaderBoardResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) Game24H(ctx context.Context, in *Game24HReq, opts ...client.CallOption) (*Game24HResp, error) {
	req := c.c.NewRequest(c.name, "Game.Game24H", in)
	out := new(Game24HResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Game service

type GameHandler interface {
	GameRandom(context.Context, *GameRandomReq, *GameRandomResp) error
	GameGetInviteCode(context.Context, *UserIdReq, *GameGetInviteCodeResp) error
	LeaderBoard(context.Context, *LeaderBoardReq, *LeaderBoardResp) error
	MissionCheckIn(context.Context, *UserIdReq, *Empty) error
	MissionTweet(context.Context, *MissionTweetReq, *Empty) error
	MissionInvited(context.Context, *MissionInvitedReq, *Empty) error
	MissionProfile(context.Context, *UserIdReq, *MissionProfileResp) error
	ScoreList(context.Context, *ScoreListReq, *ScoreListResp) error
	ConsumeList(context.Context, *ConsumeListReq, *ConsumeListResp) error
	TGGameRandom(context.Context, *GameRandomReq, *GameRandomResp) error
	TGLeaderBoard(context.Context, *LeaderBoardReq, *LeaderBoardResp) error
	Game24H(context.Context, *Game24HReq, *Game24HResp) error
}

func RegisterGameHandler(s server.Server, hdlr GameHandler, opts ...server.HandlerOption) error {
	type game interface {
		GameRandom(ctx context.Context, in *GameRandomReq, out *GameRandomResp) error
		GameGetInviteCode(ctx context.Context, in *UserIdReq, out *GameGetInviteCodeResp) error
		LeaderBoard(ctx context.Context, in *LeaderBoardReq, out *LeaderBoardResp) error
		MissionCheckIn(ctx context.Context, in *UserIdReq, out *Empty) error
		MissionTweet(ctx context.Context, in *MissionTweetReq, out *Empty) error
		MissionInvited(ctx context.Context, in *MissionInvitedReq, out *Empty) error
		MissionProfile(ctx context.Context, in *UserIdReq, out *MissionProfileResp) error
		ScoreList(ctx context.Context, in *ScoreListReq, out *ScoreListResp) error
		ConsumeList(ctx context.Context, in *ConsumeListReq, out *ConsumeListResp) error
		TGGameRandom(ctx context.Context, in *GameRandomReq, out *GameRandomResp) error
		TGLeaderBoard(ctx context.Context, in *LeaderBoardReq, out *LeaderBoardResp) error
		Game24H(ctx context.Context, in *Game24HReq, out *Game24HResp) error
	}
	type Game struct {
		game
	}
	h := &gameHandler{hdlr}
	return s.Handle(s.NewHandler(&Game{h}, opts...))
}

type gameHandler struct {
	GameHandler
}

func (h *gameHandler) GameRandom(ctx context.Context, in *GameRandomReq, out *GameRandomResp) error {
	return h.GameHandler.GameRandom(ctx, in, out)
}

func (h *gameHandler) GameGetInviteCode(ctx context.Context, in *UserIdReq, out *GameGetInviteCodeResp) error {
	return h.GameHandler.GameGetInviteCode(ctx, in, out)
}

func (h *gameHandler) LeaderBoard(ctx context.Context, in *LeaderBoardReq, out *LeaderBoardResp) error {
	return h.GameHandler.LeaderBoard(ctx, in, out)
}

func (h *gameHandler) MissionCheckIn(ctx context.Context, in *UserIdReq, out *Empty) error {
	return h.GameHandler.MissionCheckIn(ctx, in, out)
}

func (h *gameHandler) MissionTweet(ctx context.Context, in *MissionTweetReq, out *Empty) error {
	return h.GameHandler.MissionTweet(ctx, in, out)
}

func (h *gameHandler) MissionInvited(ctx context.Context, in *MissionInvitedReq, out *Empty) error {
	return h.GameHandler.MissionInvited(ctx, in, out)
}

func (h *gameHandler) MissionProfile(ctx context.Context, in *UserIdReq, out *MissionProfileResp) error {
	return h.GameHandler.MissionProfile(ctx, in, out)
}

func (h *gameHandler) ScoreList(ctx context.Context, in *ScoreListReq, out *ScoreListResp) error {
	return h.GameHandler.ScoreList(ctx, in, out)
}

func (h *gameHandler) ConsumeList(ctx context.Context, in *ConsumeListReq, out *ConsumeListResp) error {
	return h.GameHandler.ConsumeList(ctx, in, out)
}

func (h *gameHandler) TGGameRandom(ctx context.Context, in *GameRandomReq, out *GameRandomResp) error {
	return h.GameHandler.TGGameRandom(ctx, in, out)
}

func (h *gameHandler) TGLeaderBoard(ctx context.Context, in *LeaderBoardReq, out *LeaderBoardResp) error {
	return h.GameHandler.TGLeaderBoard(ctx, in, out)
}

func (h *gameHandler) Game24H(ctx context.Context, in *Game24HReq, out *Game24HResp) error {
	return h.GameHandler.Game24H(ctx, in, out)
}
