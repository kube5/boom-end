// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	Call(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	LoginPreByMetaMask(ctx context.Context, in *LoginPreByMetaMaskReq, opts ...client.CallOption) (*LoginPreByMetaMaskResp, error)
	LoginByMetaMask(ctx context.Context, in *LoginByMetaMaskReq, opts ...client.CallOption) (*LoginByMetaMaskResp, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*Empty, error)
	Profile(ctx context.Context, in *UserMutualReq, opts ...client.CallOption) (*ProfileResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*Empty, error)
	FindUserIdByWallet(ctx context.Context, in *Wallet, opts ...client.CallOption) (*UserIdResp, error)
	//--------------internal-------------------
	LoginInternal(ctx context.Context, in *LoginInternalReq, opts ...client.CallOption) (*LoginByMetaMaskResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Call(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "User.Call", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginPreByMetaMask(ctx context.Context, in *LoginPreByMetaMaskReq, opts ...client.CallOption) (*LoginPreByMetaMaskResp, error) {
	req := c.c.NewRequest(c.name, "User.LoginPreByMetaMask", in)
	out := new(LoginPreByMetaMaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginByMetaMask(ctx context.Context, in *LoginByMetaMaskReq, opts ...client.CallOption) (*LoginByMetaMaskResp, error) {
	req := c.c.NewRequest(c.name, "User.LoginByMetaMask", in)
	out := new(LoginByMetaMaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenResp, error) {
	req := c.c.NewRequest(c.name, "User.RefreshToken", in)
	out := new(RefreshTokenResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Profile(ctx context.Context, in *UserMutualReq, opts ...client.CallOption) (*ProfileResp, error) {
	req := c.c.NewRequest(c.name, "User.Profile", in)
	out := new(ProfileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserIdByWallet(ctx context.Context, in *Wallet, opts ...client.CallOption) (*UserIdResp, error) {
	req := c.c.NewRequest(c.name, "User.FindUserIdByWallet", in)
	out := new(UserIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginInternal(ctx context.Context, in *LoginInternalReq, opts ...client.CallOption) (*LoginByMetaMaskResp, error) {
	req := c.c.NewRequest(c.name, "User.LoginInternal", in)
	out := new(LoginByMetaMaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Call(context.Context, *Empty, *Empty) error
	LoginPreByMetaMask(context.Context, *LoginPreByMetaMaskReq, *LoginPreByMetaMaskResp) error
	LoginByMetaMask(context.Context, *LoginByMetaMaskReq, *LoginByMetaMaskResp) error
	RefreshToken(context.Context, *RefreshTokenReq, *RefreshTokenResp) error
	Logout(context.Context, *LogoutReq, *Empty) error
	Profile(context.Context, *UserMutualReq, *ProfileResp) error
	UpdateUser(context.Context, *UpdateUserReq, *Empty) error
	FindUserIdByWallet(context.Context, *Wallet, *UserIdResp) error
	//--------------internal-------------------
	LoginInternal(context.Context, *LoginInternalReq, *LoginByMetaMaskResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Call(ctx context.Context, in *Empty, out *Empty) error
		LoginPreByMetaMask(ctx context.Context, in *LoginPreByMetaMaskReq, out *LoginPreByMetaMaskResp) error
		LoginByMetaMask(ctx context.Context, in *LoginByMetaMaskReq, out *LoginByMetaMaskResp) error
		RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenResp) error
		Logout(ctx context.Context, in *LogoutReq, out *Empty) error
		Profile(ctx context.Context, in *UserMutualReq, out *ProfileResp) error
		UpdateUser(ctx context.Context, in *UpdateUserReq, out *Empty) error
		FindUserIdByWallet(ctx context.Context, in *Wallet, out *UserIdResp) error
		LoginInternal(ctx context.Context, in *LoginInternalReq, out *LoginByMetaMaskResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Call(ctx context.Context, in *Empty, out *Empty) error {
	return h.UserHandler.Call(ctx, in, out)
}

func (h *userHandler) LoginPreByMetaMask(ctx context.Context, in *LoginPreByMetaMaskReq, out *LoginPreByMetaMaskResp) error {
	return h.UserHandler.LoginPreByMetaMask(ctx, in, out)
}

func (h *userHandler) LoginByMetaMask(ctx context.Context, in *LoginByMetaMaskReq, out *LoginByMetaMaskResp) error {
	return h.UserHandler.LoginByMetaMask(ctx, in, out)
}

func (h *userHandler) RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenResp) error {
	return h.UserHandler.RefreshToken(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *LogoutReq, out *Empty) error {
	return h.UserHandler.Logout(ctx, in, out)
}

func (h *userHandler) Profile(ctx context.Context, in *UserMutualReq, out *ProfileResp) error {
	return h.UserHandler.Profile(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UpdateUserReq, out *Empty) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) FindUserIdByWallet(ctx context.Context, in *Wallet, out *UserIdResp) error {
	return h.UserHandler.FindUserIdByWallet(ctx, in, out)
}

func (h *userHandler) LoginInternal(ctx context.Context, in *LoginInternalReq, out *LoginByMetaMaskResp) error {
	return h.UserHandler.LoginInternal(ctx, in, out)
}
